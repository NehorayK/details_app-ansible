pipeline {
  agent {
    docker {
      image 'python:3.10'
      args '-v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  options { ansiColor('xterm'); timestamps(); buildDiscarder(logRotator(numToKeepStr:'10')) }
  environment { INVENTORY='inventory.ini'; PLAYBOOK='playbook.yml' }
  stages {
    stage('Checkout')   { steps { checkout scm } }
    stage('Setup Env')  { steps { sh 'pip install ansible ansible-lint' } }
    stage('Lint')       { steps { sh 'ansible-lint roles/details_app/tasks/main.yml' } }
    stage('Syntax')     { steps { sh "ansible-playbook --syntax-check $PLAYBOOK -i $INVENTORY" } }
    stage('Dry Run')    { steps { sh "ansible-playbook --check $PLAYBOOK -i $INVENTORY" } }
    stage('Build') { steps {
      sh 'docker build -t ubuntu-systemd:22.04 .'
      sh '''
        docker rm -f appserver || true
        docker run -d --name appserver --privileged \
          -v /sys/fs/cgroup:/sys/fs/cgroup:rw \
          --tmpfs /run:exec,mode=755 \
          --tmpfs /run/lock:mode=755 \
          --tmpfs /tmp:rw \
          -e container=docker ubuntu-systemd:22.04
      '''
    }}
    stage('Deploy')     { steps { sh "ansible-playbook $PLAYBOOK -i $INVENTORY" } }
    stage('Test')       { steps { sh "docker exec appserver curl -f http://localhost:8000/health" } }
    stage('Cleanup')    { steps { sh 'docker rm -f appserver' } }
  }
  post {
    success { echo '✅ Build succeeded' }
    failure { echo '❌ Build failed' }
    always  { archiveArtifacts artifacts: '**/ansible.log', fingerprint: true }
  }
}