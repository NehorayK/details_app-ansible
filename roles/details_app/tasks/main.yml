---
- name: Ensure apt cache is up to date and required packages installed
  become: true
  ansible.builtin.apt:
    update_cache: true
    name:
      - git
      - curl
      - python3-pip
      - python3-packaging
      - python3-venv
    state: present

- name: Ensure app user exists
  become: true
  ansible.builtin.user:
    name: "{{ app_user }}"
    home: "{{ app_home }}"
    create_home: true

- name: Copy application code from local Projects folder
  become: true
  ansible.builtin.copy:
    src: ../projects/details_app/
    dest: "{{ app_home }}/details_app"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: '0755'

- name: Fix ownership of the app directory
  become: true
  ansible.builtin.file:
    path: "{{ app_home }}/details_app"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    recurse: true

- name: Create Python virtualenv
  become: true
  ansible.builtin.command:
    cmd: "{{ python_bin }} -m venv {{ venv_path }}"
  args:
    creates: "{{ venv_path }}/bin/activate"

- name: Install dependencies
  become: true
  ansible.builtin.pip:
    virtualenv: "{{ venv_path }}"
    requirements: "{{ app_home }}/details_app/requirements.txt"

- name: Deploy systemd unit
  become: true
  ansible.builtin.template:
    src: details_app.service
    dest: "/etc/systemd/system/{{ service_name }}.service"
    mode: '0644'

- name: Reload systemd daemon
  become: true
  ansible.builtin.systemd:
    daemon_reload: true
  notify: restart details_app

- name: Ensure details_app service is enabled and running
  become: true
  ansible.builtin.systemd:
    name: "{{ service_name }}"
    enabled: true
    state: started

- name: Wait for healthy response
  become: true
  ansible.builtin.uri:
    url: "http://localhost:{{ app_port }}{{ healthcheck_path }}"
    status_code: 200
    return_content: false
  register: health_check
  until: health_check.status == 200
  retries: 10
  delay: 5